"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"sidebar":[{"type":"link","label":"Home","href":"/meteor-kmp/","docId":"index"},{"type":"category","label":"Guides","collapsed":true,"items":[{"type":"link","label":"Getting Started","href":"/meteor-kmp/guides/getting-started","docId":"guides/getting-started"},{"type":"link","label":"Core Concepts","href":"/meteor-kmp/guides/concepts","docId":"guides/concepts"}],"collapsible":true},{"type":"category","label":"Common Components","collapsed":true,"items":[{"type":"link","label":"Common ViewModel","href":"/meteor-kmp/common/vm","docId":"common/vm"},{"type":"link","label":"Common Flow","href":"/meteor-kmp/common/flow","docId":"common/flow"},{"type":"link","label":"Common UseCase","href":"/meteor-kmp/common/usecase","docId":"common/usecase"}],"collapsible":true},{"type":"category","label":"Tests","items":[{"type":"link","label":"Testing Environment","href":"/meteor-kmp/test/tests","docId":"test/tests"}],"collapsed":true,"collapsible":true}]},"docs":{"common/flow":{"id":"common/flow","title":"Common Flow","description":"The CommonFlow class provides common functionality for binding and observing a Flow of values. It implements the Flow interface and delegates the actual flow operations.","sidebar":"sidebar"},"common/usecase":{"id":"common/usecase","title":"Common UseCase","description":"The CommonUseCase class represents a common implementation of a use case in a multiplatform environment. It provides a foundation for executing a use case and returning the result as a Flow of Result. It also allows invoking the use case as a function for more concise usage.","sidebar":"sidebar"},"common/vm":{"id":"common/vm","title":"Common ViewModel","description":"The CommonViewModel class serves as a base class for implementing view models in a multiplatform environment.  It provides access to the store, exposes the state and effect as common flows, and allows dispatching wishes/actions to trigger state updates and side effects.","sidebar":"sidebar"},"guides/concepts":{"id":"guides/concepts","title":"Core Concepts","description":"Store","sidebar":"sidebar"},"guides/getting-started":{"id":"guides/getting-started","title":"Getting Started","description":"This guide will get you running with a Meteor installation in one minute!","sidebar":"sidebar"},"index":{"id":"index","title":"Meteor","description":"Meteor is a simple framework that helps you to create application using the MVI architecture. It provides a robust structure for organizing your code and separating concerns. Additionally, Meteor integrates with Kotlin Coroutine that helps you to write asynchronous and concurrent code.","sidebar":"sidebar"},"test/tests":{"id":"test/tests","title":"Testing Environment","description":"","sidebar":"sidebar"}}}')}}]);