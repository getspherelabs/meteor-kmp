"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[651],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(t),f=r,d=p["".concat(c,".").concat(f)]||p[f]||m[f]||l;return t?o.createElement(d,i(i({ref:n},u),{},{components:t})):o.createElement(d,i({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=f;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a[p]="string"==typeof e?e:r,i[1]=a;for(var s=2;s<l;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7343:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const l={title:"Common Flow"},i=void 0,a={unversionedId:"common/flow",id:"common/flow",title:"Common Flow",description:"The CommonFlow class provides common functionality for binding and observing a Flow of values. It implements the Flow interface and delegates the actual flow operations.",source:"@site/docs/common/2-flow.mdx",sourceDirName:"common",slug:"/common/flow",permalink:"/meteor-kmp/common/flow",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Common Flow"},sidebar:"sidebar",previous:{title:"Common ViewModel",permalink:"/meteor-kmp/common/vm"},next:{title:"Common UseCase",permalink:"/meteor-kmp/common/usecase"}},c={},s=[],u={toc:s},p="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CommonFlow")," class provides common functionality for binding and observing a ",(0,r.kt)("inlineCode",{parentName:"p"},"Flow")," of values. It implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"Flow")," interface and delegates the actual flow operations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},"public abstract class CommonFlow<out T>(private val flow: Flow<T>) : Flow<T> by flow {\n\n    public open fun bind(\n        scope: CoroutineScope,\n        values: (T) -> Unit,\n        failure: ((failure: Throwable) -> Unit)? = null,\n        completion: (() -> Unit)? = null\n    ): CommonJob {\n        return flow.bind(scope, values, failure, completion)\n    }\n}\n")),(0,r.kt)("p",null," It provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"bind")," function, which allows you to bind the flow to a coroutine scope and specify callback functions for handling non-null values, failures, and completion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},"internal fun <T> Flow<T>.bind(\n    scope: CoroutineScope,\n    values: (T) -> Unit,\n    failure: ((failure: Throwable) -> Unit)?,\n    completion: (() -> Unit)?\n): CommonJob {\n    val currentJob = this.onEach(values)\n        .run {\n            if (completion !== null) {\n                onCompletion { failure ->\n                    if (failure === null) completion() else throw failure\n                }\n            } else {\n                this\n            }\n        }\n        .run {\n            if (failure !== null) {\n                catch { message -> failure(message) }\n            } else {\n                this\n            }\n        }\n        .launchIn(scope)\n\n    return CoroutineCommonJob(currentJob)\n}\n")),(0,r.kt)("p",null,"Internally, the bind function delegates to an extension function on the actual Flow instance. This extension function handles the composition of operators such as onEach, catch, and onCompletion to provide the desired behavior. The resulting Flow is then launched within the specified coroutine scope."))}m.isMDXComponent=!0}}]);