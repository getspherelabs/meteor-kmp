"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[511],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(n),f=o,d=p["".concat(c,".").concat(f)]||p[f]||u[f]||a;return n?r.createElement(d,i(i({ref:t},m),{},{components:n})):r.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6814:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={title:"Common ViewModel"},i=void 0,s={unversionedId:"common/vm",id:"common/vm",title:"Common ViewModel",description:"The CommonViewModel class serves as a base class for implementing view models in a multiplatform environment.  It provides access to the store, exposes the state and effect as common flows, and allows dispatching wishes/actions to trigger state updates and side effects.",source:"@site/docs/common/1-vm.mdx",sourceDirName:"common",slug:"/common/vm",permalink:"/meteor-kmp/common/vm",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Common ViewModel"},sidebar:"sidebar",previous:{title:"Core Concepts",permalink:"/meteor-kmp/guides/concepts"},next:{title:"Common Flow",permalink:"/meteor-kmp/common/flow"}},c={},l=[],m={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"CommonViewModel")," class serves as a base class for implementing view models in a multiplatform environment.  It provides access to the store, exposes the state and effect as common flows, and allows dispatching wishes/actions to trigger state updates and side effects."),(0,o.kt)("p",null,"Also, ",(0,o.kt)("inlineCode",{parentName:"p"},"CommonViewModel")," provides additional functionality and lifecycle management specifically designed for common view models in a multiplatform environment."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kt"},"public abstract class CommonViewModel<State : Any, Wish : Any, Effect : Any> : ViewModel {\n\n    public constructor() : super()\n\n    public constructor(closeables: List<Closeable>) : super(*closeables.toTypedArray())\n\n    public abstract val store: Store<State, Wish, Effect>\n\n    public fun wish(wish: Wish) {\n        viewModelScope.launch {\n            store.wish(wish)\n        }\n    }\n\n    override fun onCleared() {\n        super.onCleared()\n        store.cancel()\n    }\n}\n\n")))}u.isMDXComponent=!0}}]);