"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[839],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1247:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={title:"Getting Started"},i=void 0,l={unversionedId:"guides/getting-started",id:"guides/getting-started",title:"Getting Started",description:"This guide will get you running with a Meteor installation in one minute!",source:"@site/docs/guides/1-getting-started.mdx",sourceDirName:"guides",slug:"/guides/getting-started",permalink:"/meteor-kmp/guides/getting-started",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Getting Started"},sidebar:"sidebar",previous:{title:"Home",permalink:"/meteor-kmp/"},next:{title:"Core Concepts",permalink:"/meteor-kmp/guides/concepts"}},s={},c=[{value:"Setup",id:"setup",level:2},{value:"Define the contract",id:"define-the-contract",level:3},{value:"Create the ViewModel",id:"create-the-viewmodel",level:3},{value:"Define Reducer and Middleware",id:"define-reducer-and-middleware",level:3},{value:"Start using Meteor in your application",id:"start-using-meteor-in-your-application",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide will get you running with a Meteor installation in one minute!"),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"Add the dependency below into your module's ",(0,r.kt)("inlineCode",{parentName:"p"},"build.gradle.kts")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},'\n// It includes viewmodel, stateflow and core components.\nimplementation("io.github.behzodhalil:meteor-core:<latest-version>")\n// If only need common use case\nimplementation("io.github.behzodhalil:meteor-usecase:<latest-version>")\n// For testing\nimplementation("io.github.behzodhalil:meteor-test:<latest-version>")\n')),(0,r.kt)("h3",{id:"define-the-contract"},"Define the contract"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},"data class CountState(\n    val count: Int = 0\n)\n\nsealed interface CountWish {\n    object Increase : CountWish\n    object Decrease : CountWish\n    object Reset : CountWish\n    object ZeroValue : CountWish\n}\n\nsealed interface CountEffect {\n    data class Failure(val message: String) : CountEffect\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"State"),' represents the current state of your application. Effects are a way to handle side effects in Meteor. Side effects can include operations such as making network requests, updating a database, displaying UI messages, or triggering external actions.  A "wish" in Meteor represents an action or an intention to change the state of the application.'),(0,r.kt)("h3",{id:"create-the-viewmodel"},"Create the ViewModel"),(0,r.kt)("p",null,"Define a ViewModel class, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"MainViewModel"),", that extends ",(0,r.kt)("inlineCode",{parentName:"p"},"CommonViewModel")," with the appropriate state, wish, and effect types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},"class MainViewModel : CommonViewModel<CountState, CountWish, CountEffect>() {\n      // ....\n}\n")),(0,r.kt)("p",null,"Inside your ViewModel, override the store property by creating a ",(0,r.kt)("inlineCode",{parentName:"p"},"Meteor")," store using the ",(0,r.kt)("inlineCode",{parentName:"p"},"createMeteor")," function and providing the necessary configurations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},'    override val store: Store<CountState, CountWish, CountEffect> = createMeteor(\n        configs = MeteorConfigs.build {\n            initialState = CountState.Empty\n            storeName = "MainViewModel"\n            reducer = CountReducer\n            middleware = CountMiddleware\n        }\n    )\n')),(0,r.kt)("p",null,"Define properties for effect and state in your ViewModel, which will expose the effect and state as ",(0,r.kt)("inlineCode",{parentName:"p"},"CommonFlow")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"CommonStateFlow"),", respectively:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},"val effect: NonNullCommonFlow<CountEffect> = store.effect.asCommonFlow()\nval state: NonNullCommonStateFlow<CountState> = store.state.asCommonStateFlow()\n\n")),(0,r.kt)("h3",{id:"define-reducer-and-middleware"},"Define Reducer and Middleware"),(0,r.kt)("p",null,"Create an object / class , such as ",(0,r.kt)("inlineCode",{parentName:"p"},"CountReducer"),", that implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"Reducer")," interface with the appropriate state, wish, and effect types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},'    object CountReducer : Reducer<CountState, CountWish, CountEffect> {\n        override fun reduce(state: CountState, wish: CountWish): Change<CountState, CountEffect> {\n            return when (wish) {\n                CountWish.Decrease -> {\n                    expect { state.copy(count = state.count - 1) }\n                }\n                CountWish.Increase -> {\n                    expect { state.copy(count = state.count + 1) }\n                }\n                CountWish.Reset -> {\n                    expect { state.copy(count = 0) }\n                }\n                CountWish.ZeroValue -> {\n                    effect {\n                        CountEffect.Failure("The value is zero")\n                    }\n                }\n            }\n        }\n\n    }\n\n')),(0,r.kt)("h3",{id:"start-using-meteor-in-your-application"},"Start using Meteor in your application"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kt"},"\nviewModel.state.onEach { state ->\n    // Handle the state\n}.launchIn(lifecycleScope)\n\nviewModel.effect.onEach { effect ->\n    // Handle the effect, such as displaying a toast message or triggering an action\n}.launchIn(lifecycleScope)\n\n\n")))}d.isMDXComponent=!0}}]);